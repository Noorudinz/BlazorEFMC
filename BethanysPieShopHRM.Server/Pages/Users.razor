@page "/users"
@attribute [Authorize]
@using BethanysPieShopHRM.Server.Services;
@using BethanysPieShopHRM.Shared;
@using Syncfusion.Blazor.Notifications;

<SfToast @ref="WarningToastObj" Title="Warning !" Content="@WarningContent" Timeout="3000">
    <ToastPosition X="Center"></ToastPosition>
</SfToast>

<SfToast @ref="SuccessToastObj" Title="Success !" Content="@SuccessContent" Timeout="3000">
    <ToastPosition X="Center"></ToastPosition>
</SfToast>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid DataSource="@GridData" AllowPaging="true">
                <GridPageSettings PageSize="10" PageCount="5" PageSizes="@pagerDropdown">
                </GridPageSettings>
                <GridEditSettings AllowDeleting="true" AllowEditing="true"></GridEditSettings>
                <GridEvents OnActionBegin="ActionBeginHandler" TValue="UserModel"></GridEvents>
                <GridColumns>
                    <GridColumn Field=@nameof(UserModel.Id) HeaderText="Id" IsPrimaryKey="true" Visible="false"></GridColumn>
                    <GridColumn Field=@nameof(UserModel.Name) HeaderText="Name" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(UserModel.Email) HeaderText="Email" Width="140"></GridColumn>
                    <GridColumn HeaderText="Manage Records" Width="150">
                        <GridCommandColumns>
                            <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-edit", CssClass="e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-save", CssClass="e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-cancel-icon", CssClass="e-flat" })"></GridCommandColumn>
                        </GridCommandColumns>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>


@code {

    SfToast WarningToastObj;
    SfToast SuccessToastObj;

    private string SuccessContent { get; set; } = "Proccessed Successfully !";
    private string WarningContent { get; set; } = "Something went wrong !";


    string[] pagerDropdown = new string[] { "All", "5", "10", "15", "20" };

    [Inject]
    public IAuthService AuthDataService { get; set; }

    public List<UserModel> GridData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        GridData = (await AuthDataService.GetAllUsers()).ToList();

    }

    public async void ActionBeginHandler(ActionEventArgs<UserModel> Args)
    {
        if (Args.Data != null)
        {
            if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {
                if (Args.Action == "Edit")
                {
                    var registerModel = new RegisterModel();
                    registerModel.Id = Args.Data.Id;
                    registerModel.UserName = Args.Data.Name;
                    registerModel.Email = Args.Data.Email;
                    registerModel.Password = "Unknown";
                    registerModel.ConfirmPassword = "Unknown";
                    var result = await AuthDataService.Register(registerModel);
                    if (result.Successful)
                        await this.SuccessToastObj.ShowAsync();
                    else
                        await this.WarningToastObj.ShowAsync();

                }
            }

            if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
            {
                var registerModel = new RegisterModel();
                registerModel.Id = Args.Data.Id;
                registerModel.UserName = Args.Data.Name;
                registerModel.Email = Args.Data.Email;
                registerModel.Password = "Unknown";
                registerModel.ConfirmPassword = "Unknown";
                var result = await AuthDataService.DeleteUser(registerModel);
                if (result.Successful)
                    await this.SuccessToastObj.ShowAsync();
                else
                    await this.WarningToastObj.ShowAsync();
            }


        }


    }

}
